from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

from Telegram_support.database.crud import (
    create_user,
    get_user_by_telegram_id,
    save_message,
    get_chat_history,
    clear_chat_history,
    get_chat_history_count,
    get_issue_status_by_issue_key,
    get_active_issue_for_user,

)

from Telegram_support.utils.jira import create_issue, add_comment_to_issue

from database.engine import create_all_tables

from configs.base_config import settings
from dotenv import load_dotenv
import requests
import logging

load_dotenv()

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

START_CHAT, TAKE_SUMMARY, END_CHAT, PHONE  = range(4)


def ask_to_open_web_ui_agent(messages_array):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –º–∞—Å–∏–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ OpenWebUI API.

    Args:
        messages_array: List[dict] —É —Ñ–æ—Ä–º–∞—Ç—ñ [{"role": "user", "content": "..."}]
    """
    response = requests.post(
        "https://ai.euromix.in.ua/api/chat/completions",
        headers={
            "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjhjOWQ2ZTBkLWRmYzMtNDNmNy1hZjcxLWFjMjJlNWI1NWNkOSJ9.H3aCuXDzE7iYr1INXbbkFzMZbCux2BFc7wwPSiAxzUI",
            "Content-Type": "application/json"
        },
        json={
            "model": "euromixsupportagent",
            "messages": messages_array,
            "stream": False,
            "files": [
                {"type": "collection", "id": "ffc3373a-148f-49dc-947f-fd8db6e6d9cc"}
            ]
        }
    )

    ai_response = ""
    if response.status_code == 200:
        result = response.json()
        ai_response = result['choices'][0]['message']['content']

    return ai_response


class SupportAiAgent:
    def __init__(self, token):
        self.application = Application.builder().token(token).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥"""

        # –û–±—Ä–æ–±–Ω–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        auth_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                PHONE: [
                    MessageHandler(filters.CONTACT, self.phone_received),
                    MessageHandler(filters.TEXT, self.confirm_phone)
                ]
            },
            fallbacks=[CommandHandler('cancel', self.cancel)]
        )

        # –ü–æ—á–∞—Ç–æ–∫ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
        start_chat = ConversationHandler(
            entry_points=[
                CommandHandler('start_chat', self.send_message),
                MessageHandler(filters.Regex("^–ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥$"), self.send_message)
            ],
            states={
                TAKE_SUMMARY: [
                    MessageHandler(filters.TEXT, self.create_summary_jira_issue)
                ],
                START_CHAT: [
                    MessageHandler(filters.TEXT, self.send_message),
                    MessageHandler(filters.TEXT, self.confirm_phone),
                ]
            },
            fallbacks=[CommandHandler('cancel', self.cancel)]
        )

        self.application.add_handler(auth_handler)
        self.application.add_handler(start_chat)
        self.application.add_handler(CommandHandler('clear_history', self.clear_history))
        self.application.add_handler(
            MessageHandler(
                filters.TEXT & ~filters.COMMAND & ~filters.Regex("^–ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥$"),
                self.send_message
            )
        )

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ—á–∞—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"""
        user_id = update.effective_user.id
        user_db = get_user_by_telegram_id(user_id)

        if user_db:
            await update.message.reply_text(
                f"–í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ! üì±\n–í–∞—à –Ω–æ–º–µ—Ä: {user_db[3]}\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                "/start_chat - –ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥\n"
                "/clear_history - –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é"
            )
            return ConversationHandler.END

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç—É
        button = KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
        keyboard = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(
            "–í—ñ—Ç–∞—é! üëã\n–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
            reply_markup=keyboard
        )
        return PHONE

    async def confirm_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        button = KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
        keyboard = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º'",
            reply_markup=keyboard
        )
        return PHONE

    async def phone_received(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
        user_id = update.effective_user.id
        full_name_user = update.effective_user.full_name

        if update.message.contact:
            phone_user = update.message.contact.phone_number
            create_user(telegram_id=user_id, telegram_name=full_name_user, phone=phone_user)

        else:
            button = KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
            keyboard = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)

            await update.message.reply_text('–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
                                            reply_markup=keyboard)
            return PHONE

        button = KeyboardButton("–ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥")
        keyboard = ReplyKeyboardMarkup([[button]], resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(
            f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!\n–í–∞—à –Ω–æ–º–µ—Ä: {phone_user}\n\n"
            f"–©–æ –± –ø–æ—á–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥",
            reply_markup=keyboard
        )
        return START_CHAT

    async def create_summary_jira_issue(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_message = update.message.text
        telegram_user_id_from_chat = update.effective_user.id
        user = get_user_by_telegram_id(telegram_user_id_from_chat)
        telegram_user_name_from_chat = update.effective_user.full_name
        telegram_user_phone_from_chat = user[3]
        telegram_user_link_from_chat = update.effective_user.link

        returned_issue_key = create_issue(summary_from_user=user_message, description='',
                                          telegram_user_id=telegram_user_id_from_chat,
                                          telegram_user_number=telegram_user_phone_from_chat,
                                          telegram_user_full_name=telegram_user_name_from_chat,
                                          telegram_user_link=telegram_user_link_from_chat)

        save_message(telegram_user_id_from_chat, "user", user_message)
        add_comment_to_issue(message=user_message, issue_key=returned_issue_key)

        # 3Ô∏è‚É£ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—é —ñ—Å—Ç–æ—Ä—ñ—é –≤ OpenWebUI API
        ai_answer = ask_to_open_web_ui_agent([{"role": "user", "content": user_message}])

        # 4Ô∏è‚É£ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
        save_message(telegram_user_id_from_chat, "assistant", ai_answer)
        add_comment_to_issue(message=ai_answer, issue_key=returned_issue_key)

        # 5Ô∏è‚É£ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await update.message.reply_text(ai_answer)
        return START_CHAT

    async def send_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        message_from_user = update.message.text
        user_id = update.effective_user.id
        user_data = get_user_by_telegram_id(user_id)

        if message_from_user == '–ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥' or message_from_user == '/start_chat':
            await update.message.reply_text(
                "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —ñ –º–∏ –≤–∞–º –Ω–∞–¥–∞–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
            )
            return TAKE_SUMMARY

        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π issue –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        active_issue_key = get_active_issue_for_user(user_id)

        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ issue - –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π
        if not active_issue_key:
            keyboard = ReplyKeyboardMarkup([
                ["–ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥"],
            ], resize_keyboard=True, one_time_keyboard=True)

            await update.message.reply_text(
                f"‚úÖ –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤\n"
                f"–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥'",
                reply_markup=keyboard
            )
            return ConversationHandler.END

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–∞–∫—Ä–∏—Ç–∏–π —Ç—ñ–∫–µ—Ç
        status_issue = get_issue_status_by_issue_key(active_issue_key)
        if status_issue == 'Done':
            keyboard = ReplyKeyboardMarkup([
                ["–ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥"],
            ], resize_keyboard=True, one_time_keyboard=True)

            await update.message.reply_text(
                f"‚úÖ –í–∞—à —Ç—ñ–∫–µ—Ç {user_data[4]} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π\n"
                f"–©–æ –± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥",
                reply_markup=keyboard
            )
            return ConversationHandler.END

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
        user_db = get_user_by_telegram_id(user_id)
        if not user_db:
            await update.message.reply_text(
                "‚ùå –°–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start"
            )
            return ConversationHandler.END

        save_message(user_id, "user", message_from_user)
        add_comment_to_issue(message=message_from_user, issue_key=active_issue_key)  # ‚úÖ

        history = get_chat_history(user_id, limit=10)

        ai_answer = ask_to_open_web_ui_agent(history)

        save_message(user_id, "assistant", ai_answer)
        add_comment_to_issue(message=ai_answer, issue_key=active_issue_key)  # ‚úÖ

        # 5Ô∏è‚É£ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await update.message.reply_text(ai_answer)

        return START_CHAT

    async def clear_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –¥—ñ–∞–ª–æ–≥—É"""
        user_id = update.effective_user.id

        # –î—ñ–∑–Ω–∞—î–º–æ—Å—å —Å–∫—ñ–ª—å–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –±—É–ª–æ
        count = get_chat_history_count(user_id)

        if clear_chat_history(user_id):
            await update.message.reply_text(
                f"‚úÖ –Ü—Å—Ç–æ—Ä—ñ—é –¥—ñ–∞–ª–æ–≥—É –æ—á–∏—â–µ–Ω–æ!\n"
                f"–í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {count}"
            )
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó")

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥"
        )
        return ConversationHandler.END

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
        self.application.run_polling()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    # 1Ô∏è‚É£ –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ –≤ –ë–î (—è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î)
    print("üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö...")
    create_all_tables()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ñ –≥–æ—Ç–æ–≤—ñ!")

    # 2Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    BOT_TOKEN = settings.TELEGRAM_BOT_TOKEN
    bot = SupportAiAgent(BOT_TOKEN)
    bot.run()
from sqlmodel import Session, select, desc
from Telegram_support.database.models import TelegramUser, ChatHistory, JiraIssueStatus
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent.parent))
from database.engine import engine
from typing import List, Optional, Tuple
import logging

logger = logging.getLogger(__name__)


# ============= –ö–û–†–ò–°–¢–£–í–ê–ß–Ü =============

def create_user(telegram_id: int, telegram_name: str, phone: str) -> bool:
    """–°—Ç–≤–æ—Ä—é—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±–æ—Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏"""
    try:
        with Session(engine) as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ —ñ—Å–Ω—É—î
            existing = session.exec(
                select(TelegramUser).where(
                    TelegramUser.telegram_user_id == telegram_id
                )
            ).first()

            if existing:
                logger.warning(f"User {telegram_id} already exists")
                return False

            user = TelegramUser(
                telegram_user_id=telegram_id,
                telegram_user_name=telegram_name,
                telegram_user_phone=phone
            )
            session.add(user)
            session.commit()
            logger.info(f"‚úÖ User {telegram_id} created")
            return True
    except Exception as e:
        logger.error(f"‚ùå Error creating user: {e}")
        return False


def get_user_by_telegram_id(telegram_id: int) -> Optional[Tuple]:
    """
    –î—ñ—Å—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ telegram_id.
    ‚úÖ –ó–ú–Ü–ù–ï–ù–û: —Ç–µ–ø–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î tuple –ë–ï–ó jira_issue_key
    –ü–æ–≤–µ—Ä—Ç–∞—î tuple: (id, telegram_id, name, phone)
    """
    try:
        with Session(engine) as session:
            statement = select(TelegramUser).where(
                TelegramUser.telegram_user_id == telegram_id
            )
            user = session.exec(statement).first()

            if user:
                return (
                    user.id,
                    user.telegram_user_id,
                    user.telegram_user_name,
                    user.telegram_user_phone
                )
            return None
    except Exception as e:
        logger.error(f"‚ùå Error getting user: {e}")
        return None

# ============= –Ü–°–¢–û–†–Ü–Ø –ß–ê–¢–£ =============

def save_message(user_id: int, role: str, message: str) -> bool:
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É.

    Args:
        user_id: telegram_user_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        role: "user" –∞–±–æ "assistant"
        message: —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    """
    try:
        with Session(engine) as session:
            chat_message = ChatHistory(
                user_id=user_id,
                role=role,
                message=message
            )
            session.add(chat_message)
            session.commit()
            logger.info(f"üíæ Message saved for user {user_id}")
            return True
    except Exception as e:
        logger.error(f"‚ùå Error saving message: {e}")
        return False


def get_chat_history(user_id: int, limit: int = 10) -> List[dict]:
    """
    –î—ñ—Å—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ N –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    –ü–æ–≤–µ—Ä—Ç–∞—î —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–ª—è OpenWebUI API.

    Args:
        user_id: telegram_user_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        limit: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

    Returns:
        List[dict]: [{"role": "user", "content": "..."}, ...]
    """
    try:
        with Session(engine) as session:
            statement = (
                select(ChatHistory)
                .where(ChatHistory.user_id == user_id)
                .order_by(desc(ChatHistory.timestamp))
                .limit(limit)
            )
            results = session.exec(statement).all()

            # –ü–µ—Ä–µ–≤–µ—Ä—Ç–∞—î–º–æ, –±–æ —Ç—Ä–µ–±–∞ –≤—ñ–¥ —Å—Ç–∞—Ä–æ–≥–æ –¥–æ –Ω–æ–≤–æ–≥–æ
            messages = [
                {"role": msg.role, "content": msg.message}
                for msg in reversed(results)
            ]

            logger.info(f"üìú Retrieved {len(messages)} messages for user {user_id}")
            return messages
    except Exception as e:
        logger.error(f"‚ùå Error getting chat history: {e}")
        return []


def clear_chat_history(user_id: int) -> bool:
    """
    –í–∏–¥–∞–ª—è—î –≤—Å—é —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    Args:
        user_id: telegram_user_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    """
    try:
        with Session(engine) as session:
            statement = select(ChatHistory).where(
                ChatHistory.user_id == user_id
            )
            results = session.exec(statement).all()

            for message in results:
                session.delete(message)

            session.commit()
            logger.info(f"üóëÔ∏è Chat history cleared for user {user_id}")
            return True
    except Exception as e:
        logger.error(f"‚ùå Error clearing chat history: {e}")
        return False


def get_chat_history_count(user_id: int) -> int:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    try:
        with Session(engine) as session:
            statement = select(ChatHistory).where(
                ChatHistory.user_id == user_id
            )
            results = session.exec(statement).all()
            return len(results)
    except Exception as e:
        logger.error(f"‚ùå Error counting messages: {e}")
        return 0


# ============= –î–ñ–ò–†–ê –¢–û–ö–ï–ù =============
def save_jira_issue(telegram_user_id: int, issue_key: str, service_app_name: str, group_support_name: str = '–¢–µ—Ö–ü—ñ–¥—Ç—Ä–∏–º–∫–∞') -> bool:
    try:
        with Session(engine) as session:
            jira_issue = JiraIssueStatus(
                telegram_user_id=telegram_user_id,
                issue_key=issue_key,
                service_app_name=service_app_name,
                group_support_name = group_support_name
            )
            session.add(jira_issue)
            session.commit()
            logger.info(f"üíæ Issue {issue_key} saved for user {telegram_user_id}")
            return True
    except Exception as e:
        logger.error(f"‚ùå Error saving issue: {e}")
        return False


def update_jira_issue_status(jira_issue_key: str, jira_new_status: str = 'Done') -> bool:
    """
    –û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å Jira issue

    Args:
        jira_issue_key: –∫–ª—é—á issue (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 'TP-17')
        jira_new_status: –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'Done')
    """
    try:
        with Session(engine) as session:
            statement = select(JiraIssueStatus).where(
                JiraIssueStatus.issue_key == jira_issue_key
            )
            jira_issue = session.exec(statement).first()

            if not jira_issue:
                logger.warning(f"Issue {jira_issue_key} not found")
                return False

            jira_issue.category_status_issue = jira_new_status
            session.add(jira_issue)
            session.commit()

            logger.info(f"‚úÖ Jira issue {jira_issue_key} updated to status {jira_new_status}")
            return True

    except Exception as e:
        logger.error(f"‚ùå Error updating jira issue: {e}")
        return False


def get_issue_status_by_issue_key(issue_key: str) -> Optional[str]:
    """
    ‚úÖ –ó–ú–Ü–ù–ï–ù–û: —Ç–µ–ø–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î —Ç—ñ–ª—å–∫–∏ —Å—Ç–∞—Ç—É—Å (str), –∞ –Ω–µ tuple
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç—É—Å Jira issue –∑–∞ –π–æ–≥–æ –∫–ª—é—á–µ–º.

    Args:
        issue_key: –∫–ª—é—á issue (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 'TP-17')

    Returns:
        str: —Å—Ç–∞—Ç—É—Å issue ('To Do', 'Done', ...) –∞–±–æ None —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    """
    try:
        with Session(engine) as session:
            statement = select(JiraIssueStatus).where(
                JiraIssueStatus.issue_key == issue_key
            )
            jira_issue = session.exec(statement).first()

            if jira_issue:
                return jira_issue.category_status_issue  # ‚úÖ –¢—ñ–ª—å–∫–∏ —Å—Ç–∞—Ç—É—Å
            return None
    except Exception as e:
        logger.error(f"‚ùå Error getting issue status: {e}")
        return None


def get_active_issue_for_user(telegram_user_id: int) -> Optional[str]:
    """
    ‚úÖ –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –ü–æ–≤–µ—Ä—Ç–∞—î –∞–∫—Ç–∏–≤–Ω–∏–π (–Ω–µ Done) issue –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    –Ø–∫—â–æ —î –∫—ñ–ª—å–∫–∞ - –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π

    Args:
        telegram_user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram

    Returns:
        str: issue_key –∞–∫—Ç–∏–≤–Ω–æ–≥–æ issue –∞–±–æ None —è–∫—â–æ –Ω–µ–º–∞—î
    """
    try:
        with Session(engine) as session:
            statement = (
                select(JiraIssueStatus)
                .where(
                    JiraIssueStatus.telegram_user_id == telegram_user_id,
                    JiraIssueStatus.category_status_issue != 'Done'
                )
                .order_by(desc(JiraIssueStatus.timestamp))
                .limit(1)
            )
            jira_issue = session.exec(statement).first()

            if jira_issue:
                return jira_issue.issue_key
            return None
    except Exception as e:
        logger.error(f"‚ùå Error getting active issue: {e}")
        return None